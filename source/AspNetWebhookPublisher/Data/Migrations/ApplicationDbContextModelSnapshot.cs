// <auto-generated />
using System;
using AspNetWebhookPublisher.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspNetWebhookPublisher.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebhookEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea39a6c2-0c77-4526-b023-28b3535c76b7"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 550, DateTimeKind.Local).AddTicks(9620),
                            Description = "Triggered when personel is created.",
                            DisplayName = "Person Created",
                            Name = "person.created"
                        },
                        new
                        {
                            Id = new Guid("e16f5835-c547-46bb-a377-13be94d9de06"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 551, DateTimeKind.Local).AddTicks(7126),
                            Description = "Triggered when personel is updated.",
                            DisplayName = "Person Updated",
                            Name = "person.updated"
                        },
                        new
                        {
                            Id = new Guid("e8ea10ca-da56-4cb6-83d0-8656e567b4ec"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 551, DateTimeKind.Local).AddTicks(7138),
                            Description = "Triggered when personel is deleted.",
                            DisplayName = "Person Deleted",
                            Name = "person.deleted"
                        });
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookPayload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("WebhookPayloads");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookPayloadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookPayloadId");

                    b.ToTable("WebhookResponses");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PayloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WebhookSubscriptionContentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookSubscriptionContentTypeId");

                    b.HasIndex("WebhookSubscriptionTypeId");

                    b.ToTable("WebhookSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94922244-aa47-4a73-9887-a7ec023d6785"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 552, DateTimeKind.Local).AddTicks(8334),
                            IsActive = true,
                            PayloadUrl = "http://localhost:5045/webhook-json-data-test",
                            Secret = "secret",
                            WebhookSubscriptionContentTypeId = new Guid("778b03a7-afe0-494e-a340-0be192300d57"),
                            WebhookSubscriptionTypeId = new Guid("0bb61f8f-e79b-4585-9286-c626bd44e841")
                        },
                        new
                        {
                            Id = new Guid("3035877d-199d-4b45-a877-01119c14431f"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 552, DateTimeKind.Local).AddTicks(8629),
                            IsActive = true,
                            PayloadUrl = "http://localhost:5045/webhook-form-data-test",
                            Secret = "secret",
                            WebhookSubscriptionContentTypeId = new Guid("25d51904-b42d-49c4-894f-8b002a9a6d59"),
                            WebhookSubscriptionTypeId = new Guid("0bb61f8f-e79b-4585-9286-c626bd44e841")
                        });
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscriptionAllowedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.HasIndex("WebhookSubscriptionId");

                    b.ToTable("WebhookSubscriptionAllowedEvents");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscriptionContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebhookSubscriptionContentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("778b03a7-afe0-494e-a340-0be192300d57"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 552, DateTimeKind.Local).AddTicks(5348),
                            Name = "application/json"
                        },
                        new
                        {
                            Id = new Guid("25d51904-b42d-49c4-894f-8b002a9a6d59"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 552, DateTimeKind.Local).AddTicks(5359),
                            Name = "application/x-www-form-urlencoded"
                        });
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebhookSubscriptionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bb61f8f-e79b-4585-9286-c626bd44e841"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 552, DateTimeKind.Local).AddTicks(6244),
                            Name = "All"
                        },
                        new
                        {
                            Id = new Guid("3a28d233-9c3c-4f42-a9ad-b002b4d968a8"),
                            Created = new DateTime(2021, 1, 22, 13, 10, 5, 552, DateTimeKind.Local).AddTicks(6251),
                            Name = "Specific"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookPayload", b =>
                {
                    b.HasOne("AspNetWebhookPublisher.Entities.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookResponse", b =>
                {
                    b.HasOne("AspNetWebhookPublisher.Entities.WebhookPayload", "WebhookPayload")
                        .WithMany()
                        .HasForeignKey("WebhookPayloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookPayload");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscription", b =>
                {
                    b.HasOne("AspNetWebhookPublisher.Entities.WebhookSubscriptionContentType", "WebhookSubscriptionContentType")
                        .WithMany()
                        .HasForeignKey("WebhookSubscriptionContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetWebhookPublisher.Entities.WebhookSubscriptionType", "WebhookSubscriptionType")
                        .WithMany()
                        .HasForeignKey("WebhookSubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookSubscriptionContentType");

                    b.Navigation("WebhookSubscriptionType");
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscriptionAllowedEvent", b =>
                {
                    b.HasOne("AspNetWebhookPublisher.Entities.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetWebhookPublisher.Entities.WebhookSubscription", "WebhookSubscription")
                        .WithMany("WebhookSubscriptionAllowedEvents")
                        .HasForeignKey("WebhookSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");

                    b.Navigation("WebhookSubscription");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspNetWebhookPublisher.Entities.WebhookSubscription", b =>
                {
                    b.Navigation("WebhookSubscriptionAllowedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
